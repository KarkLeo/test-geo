{"version":3,"sources":["logo.svg","services/navigator.ts","App.jsx","reportWebVitals.ts","index.tsx"],"names":["getCurrentPosition","setPosState","a","readPosition","position","navigator","geolocation","watchPosition","e","console","log","mapboxgl","accessToken","Map","lng","lat","track","mapContainer","useRef","useState","zoom","isLoadMap","setIsLoadMap","mapLink","setMapLink","useEffect","getSource","setData","setCenter","length","cont","current","map","container","style","center","on","addSource","addLayer","remove","className","ref","top","right","left","bottom","App","pos","setPos","setTrack","setLng","setLat","getPosition","coords","longitude","latitude","concat","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0c8ee53.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const getCurrentPosition = async (setPosState: (pos:null | GeolocationPosition ) => void): Promise<void> => {\r\n    const readPosition = (position: GeolocationPosition) => {\r\n        setPosState( position)\r\n    }\r\n await navigator.geolocation.watchPosition(readPosition, e => console.log(e))\r\n}","import React, {useEffect, useRef, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {getCurrentPosition} from \"./services/navigator\";\nimport mapboxgl from 'mapbox-gl';\n\nmapboxgl.accessToken = 'pk.eyJ1Ijoia2Fya2xlbyIsImEiOiJja2xxbmJjNmgxZHVzMm9tc2Vja3FzNmJmIn0.oMIEudxUzM7cbbOj2bybpw';\n\nconst Map = ({lng, lat, track}) => {\n    const mapContainer = useRef(null);\n\n    const [zoom, setZoom] = useState(12);\n\n    const [isLoadMap, setIsLoadMap] = useState(false)\n    const [mapLink, setMapLink] = useState(null)\n\n\n    useEffect(() => {\n        if (isLoadMap && mapLink) {\n            if(mapLink.getSource('route'))\n            mapLink.getSource('route').setData( {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'LineString',\n                    'coordinates': track\n                }\n            });\n            mapLink.setCenter(track[track.length -1])\n        }\n    }, [track])\n\n\n    useEffect(() => {\n        let cont = mapContainer.current\n\n        const map = new mapboxgl.Map({\n            container:  cont,\n            style: 'mapbox://styles/mapbox/streets-v11',\n            center: [lng, lat],\n            zoom: zoom\n        });\n\n        map.on('load', function () {\n            map.addSource('route', {\n                'type': 'geojson',\n                'data': {\n                    'type': 'Feature',\n                    'properties': {},\n                    'geometry': {\n                        'type': 'LineString',\n                        'coordinates': track\n                    }\n                }\n            });\n\n            map.addLayer({\n                'id': 'route',\n                'type': 'line',\n                'source': 'route',\n                'layout': {\n                    'line-join': 'round',\n                    'line-cap': 'round'\n                },\n                'paint': {\n                    'line-color': '#922',\n                    'line-width': 8\n                }\n            });\n            setIsLoadMap(true)\n            setMapLink(map)\n        });\n        return () => map.remove();\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div>\n            <div className=\"map-container\" ref={mapContainer} style={{\n                position: 'absolute',\n                top: 100,\n                right: 100,\n                left: 100,\n                bottom: 100\n            }} />\n        </div>\n    );\n};\n\nfunction App() {\n\n  const [pos, setPos] = useState(null)\n    const [track, setTrack] = useState([])\n    const [lng, setLng] = useState(-70.9);\n    const [lat, setLat] = useState(42.35);\n\n\n\n  useEffect(  () => {\n    const getPosition = async ()=>  {\n await getCurrentPosition(setPos)\n    }\n    getPosition()\n  }, [])\n\n    useEffect(() => {\n        if(pos) {\n            setLng(pos?.coords.longitude)\n            setLat(pos?.coords.latitude)\n        setTrack(track.concat([[pos?.coords.longitude, pos?.coords.latitude]]))\n        }\n\n\n    }, [pos])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {pos && <b>{`coords: ${pos.coords.latitude}, ${pos.coords.longitude}`}</b>}\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n        <Map lat={lat} lng={lng} track={track}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}